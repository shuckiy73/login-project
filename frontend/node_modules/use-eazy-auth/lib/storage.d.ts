import { AuthTokens } from './types';
export interface StorageBackend {
    getItem: (key: string) => string | null | Promise<string | null>;
    setItem: (key: string, value: string) => Promise<void> | void;
    removeItem: (key: string) => Promise<void> | void;
}
export interface AuthStorage<A = any, R = any> {
    getTokens(): Promise<AuthTokens<A, R>>;
    setTokens(tokens: AuthTokens<A, R>): Promise<void>;
    removeTokens(): Promise<void>;
}
/**
 * makeStorage creates a wrapper around a compatible StorageLike object
 * The wrapper solves two tasks
 * - serialize and deserialize the token bag to string
 * - return a consistent Promise-base interface towards the store
 *     in particular, some stores like ReactNative AsyncStorage are asynchronous,
 *     while window.localStorage is synchronous, we want to uniform these behaviours
 * @param {StorageBackend} givenStorageBackend
 * @param {string} storageNamespace
 */
export declare function makeStorage<A, R>(givenStorageBackend: StorageBackend | false | undefined, storageNamespace: string): AuthStorage<A, R>;
