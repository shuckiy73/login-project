import { AuthTokens } from './types';
export declare const BOOTSTRAP_AUTH_START = "BOOTSTRAP_AUTH_START";
export declare const BOOTSTRAP_AUTH_END = "BOOTSTRAP_AUTH_END";
export declare const LOGIN_LOADING = "LOGIN_LOADING";
export declare const LOGIN_FAILURE = "LOGIN_FAILURE";
export declare const LOGIN_SUCCESS = "LOGIN_SUCCESS";
export declare const CLEAR_LOGIN_ERROR = "CLEAR_LOGIN_ERROR";
export declare const LOGOUT = "LOGOUT";
export declare const TOKEN_REFRESHING = "TOKEN_REFRESHING";
export declare const TOKEN_REFRESHED = "TOKEN_REFRESHED";
export declare const UPDATE_USER = "UPDATE_USER";
export declare const PATCH_USER = "PATCH_USER";
export declare const SET_TOKENS = "SET_TOKENS";
export declare type EndBootPayload = {
    authenticated: false;
} | (AuthTokens & {
    user: any;
    authenticated: true;
});
export interface TokenRefreshedAction {
    type: typeof TOKEN_REFRESHED;
    payload: AuthTokens;
}
export interface LogoutAction {
    type: typeof LOGOUT;
}
export interface TokenRefreshingAction {
    type: typeof TOKEN_REFRESHING;
}
export declare type FunctionalUpdaterUser<U> = (user: U | null) => U | null;
export declare type AuthActions<A = any, R = any, U = any> = {
    type: typeof LOGIN_LOADING;
} | {
    type: typeof LOGIN_FAILURE;
    error: any;
} | {
    type: typeof LOGIN_SUCCESS;
    payload: AuthTokens<A, R> & {
        user: U;
    };
} | {
    type: typeof CLEAR_LOGIN_ERROR;
} | {
    type: typeof BOOTSTRAP_AUTH_START;
} | {
    type: typeof BOOTSTRAP_AUTH_END;
    payload: EndBootPayload;
} | {
    type: typeof SET_TOKENS;
    payload: AuthTokens;
} | TokenRefreshedAction | {
    type: typeof UPDATE_USER;
    payload: FunctionalUpdaterUser<U> | U | null;
} | {
    type: typeof PATCH_USER;
    payload: Partial<U>;
} | LogoutAction;
