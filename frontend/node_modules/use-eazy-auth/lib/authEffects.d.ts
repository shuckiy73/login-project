import { Dispatch, MutableRefObject } from 'react';
import { Observable } from 'rxjs';
import { AuthActions } from './actionTypes';
import { AuthStorage } from './storage';
import { AuthTokens, LoginCall, MeCall, RefreshTokenCall } from './types';
export declare type ApiFn<T = any, O = any> = (token: T) => Promise<O> | Observable<O>;
export declare function getBootAuthObservable<A, R>(meCall: MeCall<A>, refreshTokenCall: RefreshTokenCall<A, R> | undefined, storage: AuthStorage<A, R>): Observable<{
    tokensInStorage: AuthTokens<A, R>;
    responseWithRefresh: {
        response: any;
        refreshedTokens: AuthTokens<A, R> | null;
    };
}>;
export declare function bootAuth<A = any, R = any>(meCall: MeCall<A>, refreshTokenCall: RefreshTokenCall<A, R> | undefined, storage: AuthStorage<A, R>, dispatch: Dispatch<AuthActions>, tokenRef: MutableRefObject<AuthTokens<A, R> | null>, bootRef: MutableRefObject<boolean>): () => void;
export declare function makePerformLogin<A = any, R = any, U = any, C = any>(loginCall: LoginCall<C, A, R>, meCall: MeCall<A, U>, storage: AuthStorage<A, R>, dispatch: Dispatch<AuthActions<A, R, U>>, tokenRef: MutableRefObject<AuthTokens<A, R> | null>): [(loginCredentials: C) => void, () => void];
