import React, { ReactNode } from 'react';
import { Observable } from 'rxjs';
import { StorageBackend } from './storage';
import { FunctionalUpdaterUser } from './actionTypes';
import { AuthTokens, InitialAuthData, CurryAuthApiFn, CurryAuthApiFnPromise, LoginCall, MeCall, RefreshTokenCall } from './types';
export interface AuthState {
    bootstrappedAuth: boolean;
    authenticated: boolean;
    loginLoading: boolean;
    loginError: any;
}
export interface AuthUser<U = any, A = any> {
    token: A | null;
    user: U | null;
}
export interface AuthActionCreators<A = any, R = any, U = any, C = any> {
    callAuthApiObservable<O>(apiFn: CurryAuthApiFn<A, O>, ...args: any[]): Observable<O>;
    callAuthApiPromise<O>(apiFn: CurryAuthApiFnPromise<A, O>, ...args: any[]): Promise<O>;
    updateUser(user: U | FunctionalUpdaterUser<U> | null): void;
    patchUser(partialUser: Partial<U>): void;
    clearLoginError(): void;
    setTokens(authTokens: AuthTokens<A, R>): void;
    login(loginCredentials: C): void;
    logout(): void;
}
export declare const AuthStateContext: React.Context<AuthState>;
export declare const AuthUserContext: React.Context<AuthUser<any, any>>;
export declare const AuthActionsContext: React.Context<AuthActionCreators<any, any, any, any>>;
interface AuthProps<A = any, R = any, U = any, C = any> {
    children?: ReactNode;
    render?: (actions: AuthActionCreators<A, R, U, C>, authState: AuthState, authUser: AuthUser<U, A>) => ReactNode;
    loginCall: LoginCall<C, A, R>;
    meCall: MeCall<A, U>;
    refreshTokenCall?: RefreshTokenCall<A, R>;
    storageBackend?: StorageBackend | false;
    storageNamespace?: string;
    initialData?: InitialAuthData<A, R, U>;
    onLogout?: (accessToken: A) => void;
    onAuthenticate?: (user: U, accessToken: A, fromLogin: boolean) => void;
}
export default function Auth<A = any, R = any, U = any, C = any>({ children, render, loginCall, meCall, refreshTokenCall, storageBackend, storageNamespace, initialData, onLogout, onAuthenticate, }: AuthProps<A, R, U, C>): JSX.Element;
export {};
