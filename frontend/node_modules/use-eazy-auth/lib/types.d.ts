import { Observable } from "rxjs";
export interface AuthTokens<A = any, R = any> {
    accessToken: A;
    refreshToken?: R | null;
    expires?: number | null;
}
export interface InitialAuthData<A = any, R = any, U = any> {
    accessToken: A | null;
    refreshToken?: R | null;
    expires?: number | null;
    user: U | null;
}
export declare type RefreshTokenCall<A = any, R = any> = (refreshToken: R) => Promise<AuthTokens<A, R>> | Observable<AuthTokens<A, R>>;
export declare type MeCall<T = any, U = any, L = any> = (accessToken: T, loginResponse?: L) => Promise<U> | Observable<U>;
export declare type LoginCall<C = any, A = any, R = any> = (loginCredentials: C) => Promise<AuthTokens<A, R>> | Observable<AuthTokens<A, R>>;
export declare type CurryAuthApiFnPromise<A = any, O = any> = (accessToken: A) => (...args: any[]) => Promise<O>;
export declare type CurryAuthApiFn<A = any, O = any> = (accessToken: A) => (...args: any[]) => Observable<O> | Promise<O>;
